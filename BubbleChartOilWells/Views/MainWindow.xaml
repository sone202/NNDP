<Window x:Class="BubbleChartOilWells.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors" 
        mc:Ignorable="d"
        Height="450" Width="800" WindowStyle="None" AllowsTransparency="True" Background="Transparent" >

    <!--#region Boolean to Visibility converter-->
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

        <Style x:Key="ControlBorder" TargetType="Border">
            <Setter Property="BorderBrush" Value="Gray"/>
            <Setter Property="BorderThickness" Value="1"/>
        </Style>
        <Style x:Key="WinButton" TargetType="Button">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Border Background="Gray">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <!--#endregion -->


    <Window.CommandBindings>
        <CommandBinding Command="{x:Static SystemCommands.CloseWindowCommand}" CanExecute="CommandBinding_CanExecute" Executed="CommandBinding_Executed_Close" />
        <CommandBinding Command="{x:Static SystemCommands.MaximizeWindowCommand}" CanExecute="CommandBinding_CanExecute" Executed="CommandBinding_Executed_Maximize" />
        <CommandBinding Command="{x:Static SystemCommands.MinimizeWindowCommand}" CanExecute="CommandBinding_CanExecute" Executed="CommandBinding_Executed_Minimize" />
    </Window.CommandBindings>

    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="35" ResizeBorderThickness="5"/>
    </WindowChrome.WindowChrome>

    <Border BorderThickness="1">
        <Border.Style>
            <Style TargetType="{x:Type Border}">
                <Style.Triggers>
                    <!-- Add to avoid border disappearing when window is maximised -->
                    <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}" 
                                 Value="Maximized">
                        <Setter Property="Margin" Value="6"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}" 
                                 Value="Normal">
                        <Setter Property="Margin" Value="0"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Border.Style>


        <Grid  Background="#FF3A3A3A">

            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>


            <!--Menu-->
            <Menu WindowChrome.IsHitTestVisibleInChrome="True" Grid.Row="0" Grid.Column="0" Background="#FF3A3A3A">
                <MenuItem Header="_File import" HorizontalAlignment="Left" Background="Violet"  Height="40" FontSize="14" Foreground="White" Command="{Binding ImportFileAsyncCommand}"/>
            </Menu>



            <!--#region Window control buttons -->
            <Grid WindowChrome.IsHitTestVisibleInChrome="True" Grid.Row="0" Grid.Column="2" HorizontalAlignment="Right" VerticalAlignment="Top" Height="30">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>


                <Button Style="{StaticResource WinButton}" Grid.Column="0" HorizontalAlignment="Right" VerticalAlignment="Top" Command="{x:Static SystemCommands.MinimizeWindowCommand}" Background="{x:Null}" Foreground="{x:Null}" BorderBrush="{x:Null}" BorderThickness="0">
                    <Image Source="Icons/minimize.png"/>
                </Button>
                <Button Style="{StaticResource WinButton}" Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Top" Command="{x:Static SystemCommands.MaximizeWindowCommand}" Background="{x:Null}" Foreground="{x:Null}" BorderBrush="{x:Null}" BorderThickness="0">
                    <Image x:Name="icon_maximize" Source="Icons/maximize.png"/>
                </Button>
                <Button Grid.Column="2" HorizontalAlignment="Right" VerticalAlignment="Top" Command="{x:Static SystemCommands.CloseWindowCommand}" Background="{x:Null}" Foreground="{x:Null}" BorderBrush="{x:Null}" BorderThickness="0">
                    <Image Source="Icons/close.png" Stretch="Fill"/>
                    <Button.Style>
                        <Style TargetType="{x:Type Button}">
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Button}">
                                        <Border Background="{TemplateBinding Background}">
                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        </Border>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Button}">
                                                <Border Background="DarkRed">
                                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
            </Grid>
            <!--#endregion-->

            <Grid Background="#FF3A3A3A" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3">
                <Grid.RowDefinitions>
                    <RowDefinition Height="10"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="10"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="10"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="10"/>
                </Grid.ColumnDefinitions>





                <!--ROW 1-->

                <!--Drawing area-->
                <Border x:Name="drawing_area" Grid.Row="1" Grid.Column="2" Style="{StaticResource ControlBorder}" Margin="5,0">
                    <ItemsControl ItemsSource="{Binding oil_wells_paths}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Canvas x:Name="drawing_area" IsItemsHost="True"  Background="White" ClipToBounds="True" MouseMove="drawing_area_MouseMove" >

                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseDown">
                                            <i:InvokeCommandAction Command="{Binding BubbleSelectingAsyncCommand}"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>


                                </Canvas>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>

                </Border>

                <!--INFO-->
                <Border Grid.Row="1" Grid.Column="2" Background="White" Style="{StaticResource ControlBorder}" Margin="10" HorizontalAlignment="Left" VerticalAlignment="Top"
                         Visibility="{Binding Path = any_selected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter} }">
                    <TextBlock Text="{Binding Path=well_info, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Margin="5" />
                </Border>

                <!--ToolBar-->
                <Border Grid.Row="1" Grid.Column="3" Style="{StaticResource ControlBorder}">
                    <ToolBarTray Orientation="Vertical" >
                        <ToolBar>
                            <Button Command="{Binding OpenSettingsAsyncCommand}" >
                                <Image Source="Icons/settings.png" Width="20"/>
                            </Button>
                            <Button Command="{Binding OpenTreeAsyncCommand}" >
                                <Image Source="Icons/tree.png" Width="20"/>
                            </Button>
                        </ToolBar>
                    </ToolBarTray>
                </Border>


                <!--tools Window-->
                <Grid  Grid.Row="1" Grid.Column="1" >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="5"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Border  Style="{StaticResource ControlBorder}"
                             Grid.Row="0"
                             Visibility="{Binding Path = tree_visibility, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter} }" >
                        <TreeView BorderThickness="0">
                            <TreeViewItem Header="Скважины"/>
                            <TreeViewItem Header="Пузырьковые карты">
                                <CheckBox>Карта текущих отборов</CheckBox>
                                <CheckBox>Карта накопленных отборов</CheckBox>
                            </TreeViewItem>
                            <TreeViewItem Header="Карты"/>
                        </TreeView>
                    </Border>
                    <Border  Style="{StaticResource ControlBorder}"
                             Grid.Row="2"
                             Visibility="{Binding Path = settings_visibility, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter} }" >
                        <TextBlock Text="Settings" Background="White"/>
                    </Border>
                </Grid>



                <!--ROW 2-->
                <!--Mouse coordinates-->
                <Label Grid.Row="2" Grid.Column="2" x:Name="label_coordinates" Foreground="White"/>

            </Grid>
        </Grid>
    </Border>
</Window>
